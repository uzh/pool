name: CI
on: [push, pull_request]

jobs:
  build:
    name: Build and test

    runs-on: ${{ matrix.os }}

    env:
      EMAIL_RATE_LIMIT: 3600
      MATCHER_MAX_CAPACITY: 80
      MYSQL_DATABASE: test_econ
      MYSQL_ROOT_PASSWORD: password
      SIHL_ENV: test
      TEST_EMAIL: test@econ.uzh.ch

    services:
      database-root:
        image: mariadb:10.6
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        ports: ['3306:3306']
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      database-tenant:
        image: mariadb:10.6
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        ports: ['3307:3306']
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ocaml-compiler: [4.12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true
          opam-pin: true
          opam-depext: false

      - name: Install system dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libmariadbclient-dev

      - name: Pin Sihl and other custom libraries
        run: |
          opam pin add -yn sihl https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-cache https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-email https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-queue https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-storage https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-token https://github.com/oxidizing/sihl.git
          opam pin add -yn sihl-user https://github.com/oxidizing/sihl.git
          opam pin add -yn canary https://github.com/uzh/canary.git
          opam pin add -yn conformist https://github.com/oxidizing/conformist.git
          opam pin add -ywn guardian https://github.com/uzh/guardian.git

      - name: Pin current pool tool
        run: |
          opam pin add -yn pool .
          OPAMSOLVERTIMEOUT=180 opam depext -y pool

      - name: Install dependencies
        run: opam install --deps-only --with-test -y .

      - name: Build
        run: opam exec -- dune build --root .

      - name: Check formatting
        run: make format

      - name: Migrate and seed test database
        env:
          DATABASE_URL: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3306/${{ env.MYSQL_DATABASE }}
          DATABASE_URL_TENANT_TEST: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3307/${{ env.MYSQL_DATABASE }}
        run: |
          opam config exec -- dune exec --root . pool/run/run.exe migrate.root
          opam config exec -- dune exec --root . pool/run/run.exe seed.root.clean
          opam config exec -- dune exec --root . pool/run/run.exe migrate.tenant
          opam config exec -- dune exec --root . pool/run/run.exe seed.tenant.clean

      - name: Run tests
        env:
          DATABASE_URL: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3306/${{ env.MYSQL_DATABASE }}
          DATABASE_URL_TENANT_TEST: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3307/${{ env.MYSQL_DATABASE }}
        run: opam config exec -- make test

      - uses: actions/upload-artifact@v3
        with:
          name: run.exe
          path: _build/default/pool/run/run.exe

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: tests
          path: _build/default/pool/test/

      - name: Notify about failure
        if: failure()
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"Pipeline failed!","themeColor":"ff0000","title":"$GITHUB_REPOSITORY pipeline failed ðŸ’¢!","sections":[{"facts":[{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"},{"name":"Commit:","value":"$GITHUB_SHA"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.ECON_TEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

  assets:
    name: Build assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [node:16]
    env:
      ECON_PACKAGE_REGISTRY_READ_TOKEN: ${ECON_PACKAGE_REGISTRY_READ_TOKEN}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install yarn packages
        run: yarn install

      - name: build yarn package
        run: yarn build

      - name: move all assets to one folder
        run: '[ "$(ls pool/public)" ] && cp -r pool/public/* public || exit 0'

      - uses: actions/upload-artifact@v3
        with:
          name: assets
          path: public

      - name: Notify about failure
        if: failure()
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"Pipeline failed!","themeColor":"ff0000","title":"$GITHUB_REPOSITORY pipeline failed ðŸ’¢!","sections":[{"facts":[{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"},{"name":"Commit:","value":"$GITHUB_SHA"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.ECON_TEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

  release:
    name: Release a new version
    runs-on: ubuntu-latest
    needs: [build, assets]
    if: github.ref_type == 'tag'
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v3.0.0
        with:
          myToken: ${{ secrets.DEPLOY_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          token: ${{ secrets.DEPLOY_TOKEN }}

      - name: Notify about failure
        if: failure()
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"Pipeline failed!","themeColor":"ff0000","title":"$GITHUB_REPOSITORY pipeline failed ðŸ’¢!","sections":[{"facts":[{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"},{"name":"Commit:","value":"$GITHUB_SHA"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.ECON_TEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json
