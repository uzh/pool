name: CI
on:
  push:

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      EMAIL_RATE_LIMIT: 3600
      MATCHER_MAX_CAPACITY: 80
      MYSQL_DATABASE: test_econ
      MYSQL_ROOT_PASSWORD: password
    services:
      database-root:
        image: mariadb:10.6
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      database-tenant:
        image: mariadb:10.6
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and test with Docker
        uses: addnab/docker-run-action@v3
        env:
          DATABASE_URL: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@database-root:3306/${{ env.MYSQL_DATABASE }}
          DATABASE_URL_TENANT_TEST: mariadb://root:${{ env.MYSQL_ROOT_PASSWORD }}@database-tenant:3306/${{ env.MYSQL_DATABASE }}
          SIHL_ENV: test
          SMTP_SENDER: test@econ.uzh.ch
          TEST_EMAIL: test@econ.uzh.ch
        with:
          image: ocaml/opam:debian-10-ocaml-4.12
          options: -v ${{ github.workspace }}:/app -w /app -e DATABASE_URL -e DATABASE_URL_TENANT_TEST -e TEST_EMAIL -e SMTP_SENDER -e SIHL_ENV
          run: |
            # Reclaim required directory permissions
            sudo chown -R opam .

            # Build and test executable
            /app/scripts/build.sh

            # Restore directory permissions to avoid conflicts
            sudo chown -R 1001:123 .

      - uses: actions/upload-artifact@v3
        with:
          name: run.exe
          path: _build/default/pool/run/run.exe

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: tests
          path: _build/default/pool/test/

      - name: Notify about failure
        if: failure()
        uses: ./.github/actions/notify-failure
        with:
          webhook: ${{ secrets.ECON_TEAMS_WEBHOOK }}

      - name: Trigger staging deploy
        if: github.ref_type != 'tag'
        uses: ./.github/actions/notify-failure
        with:
          url: ${{ secrets.ECON_DEPLOY_TRIGGER_URL }}
          token: ${{ secrets.ECON_DEPLOY_TRIGGER_TOKEN }}

  assets:
    name: Build assets
    runs-on: ubuntu-latest
    container:
      image: node:lts
      env:
        ECON_PACKAGE_REGISTRY_READ_TOKEN: ${{ secrets.ECON_PACKAGE_REGISTRY_READ_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install yarn packages
        run: yarn install

      - name: build yarn package
        run: yarn build

      - name: move all assets to one folder
        run: '[ "$(ls pool/public)" ] && cp -r pool/public/* public || exit 0'

      - uses: actions/upload-artifact@v3
        with:
          name: assets
          path: public

      - name: Notify about failure
        if: failure()
        uses: ./.github/actions/notify-failure
        with:
          webhook: ${{ secrets.ECON_TEAMS_WEBHOOK }}

  release:
    name: Release a new version
    runs-on: ubuntu-latest
    needs: [build, assets]
    if: github.ref_type == 'tag'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Set enviroment for github-release
        run: |
          CHANGELOG=$(sed -nr "/^## .?v?${GITHUB_REF_NAME}/,/^## /p" CHANGELOG.md | sed '1d;2d;$d')
          echo "CHANGELOG=$(echo $CHANGELOG)" >> $GITHUB_ENV

      - name: Create release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ env.CHANGELOG }}
          files: >
            assets/
            run.exe

      - name: Notify about failure
        if: failure()
        uses: ./.github/actions/notify-failure
        with:
          webhook: ${{ secrets.ECON_TEAMS_WEBHOOK }}

  deploy:
    name: Trigger production deploy
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: ./.github/actions/notify-failure
        with:
          url: ${{ secrets.ECON_DEPLOY_TRIGGER_URL }}
          token: ${{ secrets.ECON_DEPLOY_TRIGGER_TOKEN }}
