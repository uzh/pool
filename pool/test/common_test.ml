module Data = struct
  let sender = "test@econ.uzh.ch"
  let recipient = "it@econ.uzh.ch"
  let subject = "test interceptor"

  let body =
    "Dear tester,\n\n\
     this mail is generated by pool tool test stage.\n\n\
     Best regards\n\
     Pipeline ;-)"
  ;;

  let create_email () = Sihl_email.create ~sender ~recipient ~subject body
end

let validate_email _ () =
  let open Lwt.Syntax in
  let* () =
    let msg = "Missing 'TEST_EMAIL' env variable." in
    Pool_tenant.Service.Email.handle
      ~without_email_fcn:(fun ?ctx:_ _ -> failwith msg)
      (fun ?ctx:_ email ->
        Alcotest.(
          check
            string
            "production subject"
            email.Sihl_email.subject
            Data.subject);
        Lwt.return_unit)
      (fun ?ctx:_ email new_recipient ->
        let email =
          Pool_tenant.Service.Email.redirected_email new_recipient email
        in
        Alcotest.(
          check
            string
            "intercepted subject"
            email.Sihl_email.subject
            (Format.asprintf
               "[Pool Tool] %s (original to: %s)"
               Data.subject
               Data.recipient));
        Alcotest.(
          check
            string
            "intercepted recipient"
            email.Sihl_email.recipient
            (Sihl.Configuration.read_string "TEST_EMAIL"
            |> CCOption.get_exn_or msg));
        Lwt.return_unit)
      (Data.create_email ())
  in
  Lwt.return ()
;;
